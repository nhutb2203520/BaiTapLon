const bookService = require('../services/Sach.service')
const multer = require('multer')
const path = require('path')
const fs = require('fs')

// ‚úÖ TH√äM: C·∫•u h√¨nh multer ƒë·ªÉ upload ·∫£nh
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadPath = 'uploads/books/'
    
    // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true })
    }
    
    cb(null, uploadPath)
  },
  filename: function (req, file, cb) {
    // T·∫°o t√™n file unique: timestamp + random + extension
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
    cb(null, 'book-' + uniqueSuffix + path.extname(file.originalname))
  }
})

// ‚úÖ TH√äM: Ki·ªÉm tra file type
const fileFilter = (req, file, cb) => {
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp']
  
  if (allowedTypes.includes(file.mimetype)) {
    cb(null, true)
  } else {
    cb(new Error('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPEG, PNG, GIF, WebP)'), false)
  }
}

const upload = multer({ 
  storage: storage,
  fileFilter: fileFilter,
  limits: {
    fileSize: 5 * 1024 * 1024 // Gi·ªõi h·∫°n 5MB
  }
})

// ‚úÖ S·ª¨A: Upload ·∫£nh s√°ch - syntax ƒë√£ sai
module.exports.uploadImage = (req, res, next) => {
  // S·ª≠ d·ª•ng middleware upload tr∆∞·ªõc
  upload.single('image')(req, res, (err) => {
    if (err) {
      console.error('‚ùå Multer error:', err);
      return res.status(400).json({
        success: false,
        message: err.message
      });
    }

    try {
      if (!req.file) {
        return res.status(400).json({
          success: false,
          message: 'Kh√¥ng c√≥ file ·∫£nh ƒë∆∞·ª£c upload'
        });
      }

      // Tr·∫£ v·ªÅ URL c·ªßa ·∫£nh
      const imageUrl = `/uploads/books/${req.file.filename}`;
      
      console.log('üì∏ Image uploaded successfully:', imageUrl);
      
      res.json({
        success: true,
        imageUrl: imageUrl,
        message: 'Upload ·∫£nh th√†nh c√¥ng!'
      });
    } catch (error) {
      console.error('‚ùå Error uploading image:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi upload ·∫£nh'
      });
    }
  });
};

// [GET] [/books] - L·∫•y t·∫•t c·∫£ s√°ch
module.exports.getAll = async (req, res, next) => {
  try {
    const bookservice = new bookService()
    const result = await bookservice.getAll()
    res.json(result)
  } catch (error) {
    console.error('‚ùå Error in getAll:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch s√°ch'
    })
  }
}

// [GET] [/books/hot] - L·∫•y s√°ch n·ªïi b·∫≠t
module.exports.getHot = async (req, res, next) => {
  try {
    const bookservice = new bookService()
    const result = await bookservice.getHot()
    res.json(result)
  } catch (error) {
    console.error('‚ùå Error in getHot:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y s√°ch n·ªïi b·∫≠t'
    })
  }
}

// [GET] [/books/new] - L·∫•y s√°ch m·ªõi
module.exports.getNew = async (req, res, next) => {
  try {
    const bookservice = new bookService()
    const result = await bookservice.getNew()
    res.json(result)
  } catch (error) {
    console.error('‚ùå Error in getNew:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y s√°ch m·ªõi'
    })
  }
}

// [GET] [/books/:MaSach] - L·∫•y s√°ch theo m√£
module.exports.getById = async (req, res, next) => {
  try {
    const bookservice = new bookService()
    const result = await bookservice.getById(req.params.MaSach)
    res.json(result)
  } catch (error) {
    console.error('‚ùå Error in getById:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y th√¥ng tin s√°ch'
    })
  }
}

// [POST] [/books] - Th√™m s√°ch m·ªõi
module.exports.add = async (req, res, next) => {
  try {
    console.log('üìù Adding new book with data:', req.body)
    console.log('üì∏ Image field:', req.body.image) // ‚úÖ TH√äM log debug
    
    const bookservice = new bookService()
    const result = await bookservice.add(req.body)
    
    console.log('‚úÖ Book added successfully:', result)
    res.json(result)
  } catch (error) {
    console.error('‚ùå Error in add:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói khi th√™m s√°ch'
    })
  }
}

// [PATCH] [/books/:MaSach] - C·∫≠p nh·∫≠t s√°ch
module.exports.update = async (req, res, next) => {
  try {
    console.log('‚úèÔ∏è Updating book:', req.params.MaSach, req.body)
    
    const bookservice = new bookService()
    const result = await bookservice.update({
      MaSach: req.params.MaSach,
      ...req.body
    })
    
    res.json(result)
  } catch (error) {
    console.error('‚ùå Error in update:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t s√°ch'
    })
  }
}

// [DELETE] [/books/:MaSach] - X√≥a s√°ch
module.exports.delete = async (req, res, next) => {
  try {
    console.log('üóëÔ∏è Deleting book:', req.params.MaSach)
    
    const bookservice = new bookService()
    
    // ‚úÖ TH√äM: L·∫•y th√¥ng tin s√°ch tr∆∞·ªõc khi x√≥a ƒë·ªÉ x√≥a ·∫£nh
    const book = await bookservice.getById(req.params.MaSach)
    
    const result = await bookservice.delete(req.params.MaSach)
    
    // ‚úÖ TH√äM: X√≥a file ·∫£nh n·∫øu c√≥
    if (book && book.sach && book.sach.image) {
      const imagePath = path.join(__dirname, '..', book.sach.image)
      if (fs.existsSync(imagePath)) {
        fs.unlinkSync(imagePath)
        console.log('üóëÔ∏è Deleted image file:', imagePath)
      }
    }
    
    if (result) {
      res.json({
        success: true,
        message: 'X√≥a s√°ch th√†nh c√¥ng'
      })
    } else {
      res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y s√°ch'
      })
    }
  } catch (error) {
    console.error('‚ùå Error in delete:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói khi x√≥a s√°ch'
    })
  }
}

// [DELETE] [/books] - X√≥a t·∫•t c·∫£ s√°ch
module.exports.deleteAll = async (req, res, next) => {
  try {
    const bookservice = new bookService()
    const result = await bookservice.deleteAll()
    
    res.json({
      success: true,
      deletedCount: result,
      message: `ƒê√£ x√≥a ${result} s√°ch`
    })
  } catch (error) {
    console.error('‚ùå Error in deleteAll:', error)
    res.status(500).json({
      success: false,
      message: 'L·ªói khi x√≥a t·∫•t c·∫£ s√°ch'
    })
  }
}